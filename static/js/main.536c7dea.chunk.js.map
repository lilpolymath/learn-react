{"version":3,"sources":["constants/index.js","components/Button/index.js","components/Search/index.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_QUERY","Button","_ref","onClick","_ref$className","className","children","react_default","a","createElement","type","Search","value","onChange","onSubmit","largeColumn","width","mid","small","Table","list","onDismiss","map","item","key","objectID","style","href","url","title","author","num_comments","points","components_Button","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchSubmit","event","searchTerm","state","setState","searchKey","needsToSearchTopStories","fetchSearchTopStories","preventDefault","results","error","bind","assertThisInitialized","setSearchTopStories","onSearchChange","result","hits","page","_this$state","oldHits","updatedHits","concat","toConsumableArray","objectSpread","defineProperty","_this2","arguments","length","undefined","axios","then","data","catch","target","id","_this$state2","_results$searchKey","filter","_this3","_this$state3","components_Search","components_Table","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.536c7dea.chunk.js","sourcesContent":["const DEFAULT_QUERY = 'react native';\nconst DEFAULT_HPP = 30;\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\n\nexport {\n  DEFAULT_HPP,\n  DEFAULT_QUERY,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_HPP,\n  PARAM_PAGE,\n  PARAM_SEARCH,\n};\n","import React from 'react';\n\nconst Button = ({ onClick, className = '', children }) => (\n  <button onClick={onClick} className={className} type='button'>\n    {children}\n  </button>\n);\n\nexport default Button;\n","import React from 'react';\n\nconst Search = ({ value, onChange, onSubmit, children }) => (\n  <form onSubmit={onSubmit}>\n    {children} <input type='text' value={value} onChange={onChange} />\n    <button type='button'>{children}</button>\n  </form>\n);\n\nexport default Search;\n","import React from 'react';\nimport Button from '../Button';\n\nconst largeColumn = {\n  width: '40%',\n};\n\nconst mid = {\n  width: '30%',\n};\n\nconst small = {\n  width: '10%',\n};\n\nconst Table = ({ list, onDismiss }) => (\n  <div className='table'>\n    {list.map(item => (\n      <div key={item.objectID} className='table-row'>\n        <span style={largeColumn}>\n          <a href={item.url}>{item.title}</a>\n        </span>\n        <span style={mid}>{item.author}</span>\n        <span style={small}>{item.num_comments}</span>\n        <span style={small}>{item.points}</span>\n        <span style={small}>\n          <Button\n            onClick={() => onDismiss(item.objectID)}\n            className='button-inline'\n          >\n            Dismiss\n          </Button>\n        </span>\n      </div>\n    ))}\n  </div>\n);\n\nexport default Table;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport {\n  DEFAULT_HPP,\n  DEFAULT_QUERY,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_HPP,\n  PARAM_PAGE,\n  PARAM_SEARCH,\n} from '../src/constants';\nimport Button from './components/Button';\nimport Search from './components/Search';\nimport Table from './components/Table';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      results: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n    const { searchKey, results } = this.state;\n    const oldHits =\n      results && results[searchKey] ? results[searchKey].hits : [];\n\n    const updatedHits = [...oldHits, ...hits];\n    this.setState({\n      results: {\n        ...results,\n        [searchKey]: { hits: updatedHits, page },\n      },\n    });\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    axios(\n      `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`\n    )\n      .then(result => this.setSearchTopStories(result.data))\n      .catch(error => this.setState({ error }));\n  }\n\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onSearchSubmit = event => {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n    event.preventDefault();\n  };\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n    this.setState({\n      results: { ...results, [searchKey]: { hits: updatedHits, page } },\n    });\n  }\n\n  render() {\n    const { searchTerm, results, searchKey, error } = this.state;\n    const page =\n      (results && results[searchKey] && results[searchKey].page) || 0;\n\n    const list =\n      (results && results[searchKey] && results[searchKey].hits) || [];\n\n    return (\n      <div className='page'>\n        <div className='interactions'>\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            Search\n          </Search>\n        </div>\n        {error ? (\n          <div className='interactions'>\n            <p>Something went wrong.</p>\n          </div>\n        ) : (\n          <Table list={list} onDismiss={this.onDismiss} />\n        )}\n\n        <div className='interactions'>\n          <Button\n            onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}\n          >\n            More\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}